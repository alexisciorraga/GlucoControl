// <auto-generated />
using System;
using GlucoControl.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GlucoControl.Repository.Migrations
{
    [DbContext(typeof(GlucoControlDbContext))]
    [Migration("20201116222932_InsertFixedData")]
    partial class InsertFixedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GlucoControl.Repository.Models.Control", b =>
                {
                    b.Property<int>("ControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ControlDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GlucoseLevel")
                        .HasColumnType("int");

                    b.Property<int?>("InsulinAmount")
                        .HasColumnType("int");

                    b.Property<int?>("InsulinId")
                        .HasColumnType("int");

                    b.Property<bool?>("ProvideInsulin")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ControlId");

                    b.HasIndex("InsulinId");

                    b.HasIndex("UserId");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("GlucoControl.Repository.Models.Insulin", b =>
                {
                    b.Property<int>("InsulinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GenericName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("InsulinTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Peak")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StartTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("InsulinId");

                    b.HasIndex("InsulinTypeId");

                    b.ToTable("Insulins");
                });

            modelBuilder.Entity("GlucoControl.Repository.Models.InsulinType", b =>
                {
                    b.Property<int>("InsulinTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("InsulinTypeId");

                    b.ToTable("InsulinTypes");
                });

            modelBuilder.Entity("GlucoControl.Repository.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GlucoControl.Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Lastname1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Lastname2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GlucoControl.Repository.Models.Control", b =>
                {
                    b.HasOne("GlucoControl.Repository.Models.Insulin", "Insulin")
                        .WithMany()
                        .HasForeignKey("InsulinId");

                    b.HasOne("GlucoControl.Repository.Models.User", "User")
                        .WithMany("Control")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GlucoControl.Repository.Models.Insulin", b =>
                {
                    b.HasOne("GlucoControl.Repository.Models.InsulinType", "InsulinType")
                        .WithMany("Insulin")
                        .HasForeignKey("InsulinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GlucoControl.Repository.Models.User", b =>
                {
                    b.HasOne("GlucoControl.Repository.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
